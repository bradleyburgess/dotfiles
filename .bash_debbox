#!/bin/bash
# BASH aliases and variables for debbox

# ENVIRONMENT VARIABLES
# export EDITOR="/home/bradley/bin/appimage/nvim.appimage"
# export PATH="$PATH:$HOME/docker:$HOME/.local/bin:$HOME/dotfiles:$HOME/dotfiles/scripts:$HOME/bin"
# export PLEX="/mnt/storage/plexmedia"

# ALIASES: System
alias dropbox='docker exec -it dropbox_personal dropbox'
alias scan-nextcloud='docker exec --user abc nextcloud php /config/www/nextcloud/occ files:scan --all'
alias scan-plex='docker exec plex /usr/lib/plexmediaserver/Plex\ Media\ Scanner --scan'
alias reboot='sudo systemctl reboot'
alias shutdown='sudo systemctl shutdown'
alias update='sudo apt-get update && sudo apt-get upgrade'
alias update-containers='cd ~/docker && docker-compose pull --ignore-pull-failures && docker-compose up -d'

# ALIASES: Shortcuts
# alias gobj='cd ~/Documents/bujo'
# alias gowiki='cd /mnt/storage/wiki'
# alias gostorage='cd /mnt/storage'

# ALIASES: AppImages
# alias nvim='~/bin/appimage/nvim.appimage'

# ALIASES: ESUMC
# alias dropboxesumc='docker exec -it dropbox_esumc dropbox'
# alias gohymns="cd ~/Documents/esumc/hymns"

# FUNCTIONS: ESUMC
# function gobulletin {
#   cd ~/Documents/esumc/bulletin-web/next-bulletin
# }

# FUNCTIONS: TMUX
function tmuxdev() {
  tmux new-session -d -s ${PWD##*/}
  tmux rename-window -t ${PWD##*/}:1 nvim
  tmux new-window -t ${PWD##*/} -a -n npm
  tmux new-window -t ${PWD##*/} -a -n git
  tmux new-window -t ${PWD##*/} -a -n ranger
  tmux new-window -t ${PWD##*/} -a -n bash
  tmux select-window -t ${PWD##*/}:1
  tmux attach -t ${PWD##*/}
}
function tmuxadmin() {
  cd ~/
  tmux new-session -d -s admin
  tmux rename-window -t admin:1 htop
  tmux new-window -t admin -a -n update
  tmux new-window -t admin -a -n backup
  tmux select-window -t admin:1
  tmux send -t admin:1 htop ENTER
  tmux attach -t admin
}

# FUNCTIONS: React dev
# function newComponent() {
#   echo -n "Enter component name: "
#   read componentName
#   mkdir "src/components/${componentName}"
#   touch "src/components/${componentName}/${componentName}.js"
#   touch "src/components/${componentName}/index.js"

#   importStatement="import { ${componentName} } from "'"'"./${componentName}"'";'
#   exportStatement="export default ${componentName};"
#   echo $importStatement > "src/components/${componentName}/index.js"
#   echo $exportStatement >> "src/components/${componentName}/index.js"
# }

# FUNCTIONS: General
# function youtubedl() {
#   docker run --rm --user $UID:$GID -v $PWD:/downloads wernight/youtube-dl $1
# }

# NPM COMPLETION

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi

# Android studio PATH
# [ -d "$HOME/Library/Android/sdk" ] && ANDROID_SDK=$HOME/Library/Android/sdk || ANDROID_SDK=$HOME/Android/Sdk
# echo "export ANDROID_SDK=$ANDROID_SDK" >> ~/`[[ $SHELL == *"zsh" ]] && echo '.zshenv' || echo '.bash_profile'`
